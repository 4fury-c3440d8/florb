# Program name
PROGRAM = florb

# Compiler and linker flags
CXX = $(shell fltk-config --cxx)
CXXFLAGS = -g -Wall -O2 -funroll-loops \
    $(shell fltk-config --use-images --cxxflags) \
	$(shell curl-config --cflags) \
	$(shell libpng-config --cflags --cppflags) \
	$(shell pkg-config --cflags sqlite3) \
	$(shell PKG_CONFIG_PATH=/opt/yaml-cpp/lib/pkgconfig/ pkg-config --cflags yaml-cpp)
	
# $(shell pkg-config --cflags tinyxml)
LDFLAGS = \
	$(shell fltk-config --use-images --ldflags) \
	$(shell curl-config --libs) \
	$(shell pkg-config --libs sqlite3) \
	$(shell pkg-config --cflags --libs x11) \
	$(shell PKG_CONFIG_PATH=/opt/yaml-cpp/lib/pkgconfig/ pkg-config --libs yaml-cpp) \
	-ltinyxml \
	-lpthread \
	-lboost_system \
    -lboost_filesystem \
    -lboost_thread-mt \
	-lgps

#$(shell libpng-config --ldflags)
	

#$(shell pkg-config --libs tinyxml) \

# Phony targets
.PHONY: clean install

# Object files to be combined into the program binary. The last line combines
# fluid and regular source objects and eliminates duplicates for when fluid has
# already generated .cpp files.
OBJS_FLUID = $(rootname $(find . -name *.fl))
OBJS_CPP   = $(rootname $(find . -name *.cpp))
OBJS       = $(set $(OBJS_FLUID) $(OBJS_CPP))

# Rule for generating CPP code from fluid sources
%.cpp: %.fl
    fluid -c -o $@ -h $(replacesuffixes .cpp, .hpp, $@) $<

# Dependency scanner
.SCANNER: %.o: %.cpp :value: $(digest-in-path-optional $(INCLUDES), $&)
    g++ -MM $(addprefix -I, $(INCLUDES)) $<

# Handle subdirectories
.SUBDIRS: ./fluid
	INCLUDES[] += ../

# Build the program
CGeneratedFiles($(addsuffix .cpp, $(OBJS_FLUID)))
CXXProgram($(PROGRAM), $(OBJS))
.DEFAULT: $(PROGRAM)$(EXE)

#install target
if $(not $(defined PREFIX))
    PREFIX = /usr/local
    export

install:
    mkdir($(PREFIX)/bin/ -p)
    install $(PROGRAM) $(PREFIX)/bin/

# clean target
clean:
	$(rm -f $(PROGRAM) $(addsuffix .cpp, $(OBJS_FLUID)) $(addsuffix .hpp, $(OBJS_FLUID)) $(addsuffix .o, $(OBJS)) OMakefile.omc OMakeroot.omc)
