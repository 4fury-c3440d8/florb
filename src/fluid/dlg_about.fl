# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
decl {\#include <FL/Fl_Text_Buffer.H>} {public global
} 

decl {\#include <string>} {private global
} 

decl {\#include "version.hpp"} {private global
} 

decl {\#include "utils.hpp"} {private global
} 

class dlg_about {open
} {
  decl {Fl_Text_Buffer *m_buf;} {private local
  }
  Function {dlg_about()} {open
  } {
    Fl_Window m_window {
      label {About / License} open
      private xywh {554 188 500 295} type Double resizable modal visible
    } {
      Fl_Pack {} {open
        private xywh {0 0 500 297} resizable
      } {
        Fl_Box {} {
          private xywh {0 0 500 5}
        }
        Fl_Pack {} {open
          private xywh {0 5 500 250} type HORIZONTAL resizable
        } {
          Fl_Box {} {
            private xywh {0 5 5 250}
          }
          Fl_Text_Display m_display {selected
            private xywh {5 5 490 250} box BORDER_BOX resizable
          }
          Fl_Box {} {
            private xywh {495 5 5 250}
          }
        }
        Fl_Box {} {
          private xywh {0 255 500 5}
        }
        Fl_Pack {} {
          private xywh {0 260 500 2} type HORIZONTAL
        } {
          Fl_Box {} {
            xywh {0 260 5 2}
          }
          Fl_Box {} {
            xywh {5 260 490 2} box ENGRAVED_BOX resizable
          }
          Fl_Box {} {
            xywh {495 260 5 2}
          }
        }
        Fl_Box {} {
          private xywh {0 262 500 5}
        }
        Fl_Pack {} {open
          private xywh {0 267 500 25} type HORIZONTAL
        } {
          Fl_Box {} {
            private xywh {0 267 390 25} resizable
          }
          Fl_Button m_btn_ok {
            label OK
            private xywh {390 267 105 25}
          }
          Fl_Box {} {
            private xywh {495 267 5 25}
          }
        }
        Fl_Box {} {
          private xywh {0 292 500 5}
        }
      }
    }
    code {m_buf = new Fl_Text_Buffer();

std::string v(std::string("Version: ") + std::string(FLORB_PROGSTR));

m_buf->append(v.c_str());
m_buf->append("\\n\\n");

m_buf->append("Copyright (c) 2014 Bjoern Rehm <bjoern@shugaa.de>");
m_buf->append("\\n\\n");
m_buf->append("Distributed under the terms of the MIT license as stated below:");
m_buf->append("\\n\\n");
m_buf->append("Permission is hereby granted, free of charge, to any person obtaining a copy\\n");
m_buf->append("of this software and associated documentation files (the \\"Software\\"), to deal\\n");
m_buf->append("in the Software without restriction, including without limitation the rights\\n");
m_buf->append("to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n");
m_buf->append("copies of the Software, and to permit persons to whom the Software is\\n");
m_buf->append("furnished to do so, subject to the following conditions:");
m_buf->append("\\n\\n");
m_buf->append("The above copyright notice and this permission notice shall be included in\\n");
m_buf->append("all copies or substantial portions of the Software.");
m_buf->append("\\n\\n");
m_buf->append("THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n");
m_buf->append("IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY\\n");
m_buf->append("FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n");
m_buf->append("AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n");
m_buf->append("LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n");
m_buf->append("OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n");
m_buf->append("THE SOFTWARE.");

m_display->buffer(m_buf);

// Set the window icon
utils::set_window_icon(m_window);} {}
  }
  Function {~dlg_about()} {open
  } {
    code {if (m_window)
    delete(m_window);
    
if (m_buf)
    delete(m_buf);} {}
  }
  Function {show()} {open return_type int
  } {
    code {m_window->show();

int r = 0;
for (;;) {
  Fl_Widget *o = Fl::readqueue();
  if (!o) Fl::wait();
  else if (o == m_btn_ok) {r=1;break;}
  else if (o == m_window) {r=2;break;}
}

m_window->hide();

return r;} {}
  }
} 
